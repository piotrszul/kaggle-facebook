ntree=500,
importance = FALSE,
trControl = trControl,
metric = "ROC",
maximize = TRUE,
tuneLength = 5
)
print("Best:")
model$results[as.numeric(row.names(model$bestTune)),]
estAUC<-model$results[as.numeric(row.names(model$bestTune)),2]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
print("Train AUC:")
print(trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
write.csv(result,'target/result.csv', quote=FALSE,row.names=FALSE)
print("Best:")
model$results[as.numeric(row.names(model$bestTune)),]
estAUC<-model$results[as.numeric(row.names(model$bestTune)),2]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
write.csv(result,'target/result.csv', quote=FALSE,row.names=FALSE)
printf <- function(...) invisible(print(sprintf(...)))
print("Best:")
model$results[as.numeric(row.names(model$bestTune)),]
estAUC<-model$results[as.numeric(row.names(model$bestTune)),2]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
write.csv(result,'target/result.csv', quote=FALSE,row.names=FALSE)
modelId <-paste(model$method, format(Sys.time(), "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
modelId
model$timestamp <-Sys.time()
print("Best:")
model$results[as.numeric(row.names(model$bestTune)),]
estAUC<-model$results[as.numeric(row.names(model$bestTune)),2]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,sprintf('models/meta/%s.Rdata', modelId))
}
commit()
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,file=sprintf('models/meta/%s.Rdata', modelId))
}
commit()
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,file=sprintf('models/meta/%s.Rdata', modelId))
}
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,file=sprintf('models/meta/%s.Rdata', modelId))
}
commit()
system('ls')
commit()
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,file=sprintf('models/meta/%s.Rdata', modelId))
system("git add .")
system(sprintf('git commit -m "MODEL: %s"', modelId))
}
commit()
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
commit()
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
?train
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
model
model$bestTune
model$results[as.numeric(row.names(model$bestTune)),]
as.numeric(row.names(model$bestTune))
model$results[6,]
model$results
as.numeric(row.names(model$bestTune))
model$bestTune
row.name(model$result)
row.names(model$result)
as.numeric(row.names(model$result))
order(as.numeric(row.names(model$result)))
model$results[order(as.numeric(row.names(model$result)))[6],]
model$timestamp <-Sys.time()
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[lenght(bestTune-1)]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[length(bestTune-1)]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[length(bestTune-2)]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
commit()
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[length(bestTune-2)]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
model$timestamp <-Sys.time()
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[length(bestTune)-2]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
model$timestamp <-Sys.time()
bestTune <- model$results[order(as.numeric(row.names(model$result)))[as.numeric(row.names(model$bestTune))],]
print("Best:")
bestTune
estAUC<-bestTune[length(bestTune)-1]
printf("Estimated AUD %f" , estAUC)
predTrain <- predict(model, newdata=train_data,type="prob")
resultTrain <- data.frame(bidder_id=train_data$bidder_id,prediction=predTrain$c_1)
trainROC <-roc(train_data$class, predTrain$c_1, levels(c('c_0','c_1')))
trainAUC <-trainROC$auc
printf("Train AUC: %f", trainAUC)
predTest <- predict(model, newdata = test_data,type="prob")
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=predTest$c_1)
commit()
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
commit()
model
str(mpde;)
str(model)
?train
model
?modelLookup
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
model
summary(model)
str(model)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
model
summary(model)
str(model)
head(str(model))
model$resample
model$resampledCM
model$modelInfo
model$modelInfo()
model$results
model$pred
head(model$pred)
length(train_data$bidder_id)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
length(model$pred)
head(model$pred)
head(model$pred$pred)
length(model$pred$pred)
head(model_pred)
hear(model$pred)
head(model$pred)
model$pred[model$pred$Resample='Fold1']
model$pred[model$pred$Resample=='Fold1']
model$pred[model$pred[9]=='Fold1']
str(model$pred()
s
;
stre(model$pred)
str(model$pred)
model$pred[model$pred$Resample="Fold1",]
model$pred[model$pred$Resample=="Fold1",]
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
model$pred[model$pred$Resample=="Fold1",]
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
createFolds(train_set$class, 10)
model$pred
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
model$pred
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
?creatFolds
$createFolds
?createFolds
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(result)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
commit()
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(result)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
summary(model)
commit()
source('~/.active-rstudio-document', echo=TRUE)
commit()
summary(model)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(model)
summary(result)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(result)
dbDisconnect(conn)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(result)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
summary(model)
model
varImpPlot(model$finalModel)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
summary(model)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
summary(model)
commit()
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
?train
?gbm
str(result)
summar(train_data)
summary(train_data)
sum(train_set$outcome==1)
sum(train_set$outcome=1)
sum(train_data$outcome=1)
sum(train_data$outcome==1)
sum(train_data$outcome==0)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
?train
train_set
str(train_set)
as.numeric(train_set$class)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
commit()
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
plot(model)
summary(model)
commit()
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summar(resul)
summar(result)
summar(result)
summary(result)
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
library(pROC)
library(xgboost)
printf <- function(...) invisible(print(sprintf(...)))
commit <- function() {
modelId <-paste(model$method, format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
save(model,file=sprintf('models/meta/%s.Rdata', modelId))
system("git add .")
system(sprintf('git commit -m "MODEL: %s"', modelId))
}
all_data <- read.csv('target/data.csv')
test_data <- all_data[is.na(all_data$outcome),]
train_data <- all_data[!is.na(all_data$outcome),]
str(train_data)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
str(trainMatrix)
str(train_cov)
train_data$outcome
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
cv
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
?xgb.train
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
train_data
str(train_daa)
str(train_data)
summary(train_data)
cv
bst <- xgb.train(params = params, data = trainData,nrounds = nrounds,
verbose=1,
watchlist=list(train=trainData))
test_cov = subset(train_data, select=-c(bidder_id,outcome))
testMatrix <- as.matrix(test_cov)
storage.mode(testMatrix) <- "double"
pred <- predict(bst, testMatrix)
predMatrix <- t(matrix(pred, 9, nrow(testMatrix)))
predMatrix
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
predMatrix
pred
nrow(testMatrix)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
predMatrix
dim(pred)
nrow(pred)
length(pred)
cv
str(cv)
estAUC<-cv$test.auc.mean[nrounds]
estAUC
estAUC<-as.numeric(cv$test.auc.mean[nrounds])
estAUC
test_cov = subset(test_data, select=-c(bidder_id,outcome))
testMatrix <- as.matrix(test_cov)
storage.mode(testMatrix) <- "double"
pred <- predict(bst, testMatrix)
resultTest <- data.frame(bidder_id=test_data$bidder_id,prediction=pred)
str(resultTest)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
commit()
ls
commit()
model <- data.frame()
model$timestamp <-Sys.time()
model <- data.frame(timestamp <-Sys.time())
commit <- function() {
modelId <-paste("xgb", format(model$timestamp, "%y%m%d_%H%M%S"), sprintf('%0.5f', estAUC), sep='-' )
printf("Committing model: %s", modelId)
write.csv(resultTest,sprintf('models/%s.csv', modelId), quote=FALSE,row.names=FALSE)
#write.csv(resultTrain,sprintf('models/meta/train_%s.csv', modelId), quote=FALSE,row.names=FALSE)
#save(model,file=sprintf('models/meta/%s.Rdata', modelId))
system("git add .")
system(sprintf('git commit -m "MODEL: %s"', modelId))
}
commit()
str(train_data)
plot(train_data$bids_per_bin_10_avg, train_data$bids_per_bin_100_avg)
plot(train_data$bids_per_bin_10_avg, train_data$bids_per_bin_100_avg, col=train_data$outcome)
plot(train_data$bids_per_bin_10_avg, train_data$bids_per_bin_100_avg, col=train_data$outcome +1)
plot(train_data$bids_per_bin_10_median, train_data$bids_per_bin_100_median, col=train_data$outcome +1)
summary(train_data$bids_per_bin_10_median)
plot(log(train_data$bids_per_bin_10_median+1), log(train_data$bids_per_bin_100_median+1), col=train_data$outcome +1)
plot(log(train_data$bids_per_bin_10_avg+1), log(train_data$bids_per_bin_100_avg+1), col=train_data$outcome +1)
summary(train_data)
train_data$bidder_id[train_data$bids_per_active_10_min==0]
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
summary(model)
commit()
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
cv
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
cv
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
cv
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
gbmodel <- model
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
summary(gbmodel)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
summary(gbmodel)
summary(gbmodel)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_xgboost.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_rf.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
source('~/edu/kaggle/facebook/R/import_data.R', echo=TRUE)
summary(result)
source('~/edu/kaggle/facebook/R/train_gbm.R', echo=TRUE)
str(result)
str(train_data)
